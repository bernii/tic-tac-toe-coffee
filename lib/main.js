// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(exports) {
    var $, AiEngine, AppUI, Board, BoardGUI, EVENT, Event, GAME_STATUS, Game, Graph, Listener, NegaMaxEngine, Node, RandomEngine, SCORE, aiEngines, init;
    $ = function(id) {
      return document.getElementById(id);
    };
    Array.prototype.inArray = function(secondArray) {
      var arr, isin, j, _i, _j, _len, _len1;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        arr = this[_i];
        isin = true;
        for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
          j = arr[_j];
          if (secondArray.indexOf(j) === -1) {
            isin = false;
            break;
          }
        }
        if (isin) {
          return true;
        }
      }
      return false;
    };
    SCORE = {
      WIN: 2,
      LOOSE: -2,
      DRAW: 1
    };
    EVENT = {
      COMPUTER_MOVE: 1,
      STATUS_CHANGE: 2
    };
    GAME_STATUS = {
      START: 0,
      PROGRESS: 1,
      FINISH: 2
    };
    Node = (function() {

      function Node(board) {
        this.board = board;
      }

      Node.prototype.hasChildren = function() {
        if (this.children.length !== 0) {
          return true;
        }
        return false;
      };

      Node.prototype.value = null;

      Node.prototype.children = [];

      Node.arrayAsNodes = function(arr) {
        var elem, out, _i, _len;
        out = [];
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          elem = arr[_i];
          out.push(new Node(elem));
        }
        return out;
      };

      return Node;

    })();
    Listener = (function() {

      function Listener() {}

      Listener.prototype.notify = function(eventType, source) {
        throw "NotImplemented";
      };

      return Listener;

    })();
    BoardGUI = (function(_super) {

      __extends(BoardGUI, _super);

      function BoardGUI(canvas, board) {
        this.canvas = canvas;
        this.board = board;
        this.tickWidth = this.canvas.width / 3;
        this.tickHeight = this.canvas.height / 3;
        this.ctx = this.canvas.getContext('2d');
      }

      BoardGUI.prototype.getIndex = function(x, y) {
        var i, row, state, _i, _len, _ref;
        i = 0;
        row = 0;
        _ref = this.board.currentState;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          state = _ref[_i];
          if (i !== 0 && i % 3 === 0) {
            row++;
          }
          if (x > (i % 3) * this.tickWidth && x < (i % 3) * this.tickWidth + this.tickWidth && y > row * this.tickHeight && y < row * this.tickHeight + this.tickHeight) {
            return i;
          }
          i++;
        }
      };

      BoardGUI.prototype.notify = function(event, game) {
        this.board = game.getBoard();
        return this.draw();
      };

      BoardGUI.prototype.handleClick = function(x, y) {
        var index;
        index = this.getIndex(x, y);
        return index;
      };

      BoardGUI.prototype.drawX = function(centerX, centerY) {
        var len;
        this.ctx.beginPath();
        len = this.tickWidth > this.tickHeight ? this.tickHeight / 2 : this.tickWidth / 2;
        len *= 0.8;
        this.ctx.moveTo(centerX - len, centerY - len);
        this.ctx.lineTo(centerX + len, centerY + len);
        this.ctx.moveTo(centerX - len, centerY + len);
        this.ctx.lineTo(centerX + len, centerY - len);
        this.ctx.stroke();
        return this.ctx.closePath();
      };

      BoardGUI.prototype.drawO = function(centerX, centerY) {
        var radius;
        radius = this.tickWidth > this.tickHeight ? this.tickHeight / 2 : this.tickWidth / 2;
        radius *= 0.8;
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
        this.ctx.stroke();
        return this.ctx.closePath();
      };

      BoardGUI.prototype.draw = function() {
        var i, row, state, _i, _j, _k, _len, _ref, _results;
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.strokeStyle = '#ffe400';
        this.ctx.lineWidth = 4;
        for (i = _i = 0; _i <= 1; i = ++_i) {
          this.ctx.beginPath();
          this.ctx.moveTo(0, (i + 1) * this.tickHeight);
          this.ctx.lineTo(3 * this.tickWidth, (i + 1) * this.tickHeight);
          this.ctx.stroke();
          this.ctx.closePath();
        }
        for (i = _j = 0; _j <= 1; i = ++_j) {
          this.ctx.beginPath();
          this.ctx.moveTo((i + 1) * this.tickWidth, 0);
          this.ctx.lineTo((i + 1) * this.tickWidth, 3 * this.tickHeight);
          this.ctx.stroke();
          this.ctx.closePath();
        }
        this.ctx.strokeStyle = '#0f0';
        i = 0;
        row = 0;
        _ref = this.board.currentState;
        _results = [];
        for (_k = 0, _len = _ref.length; _k < _len; _k++) {
          state = _ref[_k];
          if (i !== 0 && i % 3 === 0) {
            row++;
          }
          if (state === 1) {
            this.drawX((i % 3) * this.tickWidth + this.tickWidth / 2, row * this.tickHeight + this.tickHeight / 2);
          } else if (state === -1) {
            this.drawO((i % 3) * this.tickWidth + this.tickWidth / 2, row * this.tickHeight + this.tickHeight / 2);
          }
          _results.push(i++);
        }
        return _results;
      };

      return BoardGUI;

    })(Listener);
    Board = (function() {

      function Board(state, _winningIndexes) {
        if (state == null) {
          state = null;
        }
        this._winningIndexes = _winningIndexes;
        if (state) {
          this.currentState = state;
        }
        if (!this._winningIndexes) {
          this._winningIndexes = this.computeWinningIndexes();
        }
      }

      Board.prototype.currentState = [0, 0, 0, 0, 0, 0, 0, 0, 0];

      Board.prototype.getPossibleMoves = function() {
        return this.getIndexesWithValue(0);
      };

      Board.prototype.getPossibleBoards = function(moveType) {
        var board, boards, move, newBoard, _i, _len, _ref;
        boards = [];
        _ref = this.getPossibleMoves();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          move = _ref[_i];
          newBoard = this.currentState.slice(0);
          newBoard[move] = moveType;
          board = new Board(newBoard, this._winningIndexes);
          board.move = move;
          boards.push(board);
        }
        return boards;
      };

      Board.prototype.getIndexesWithValue = function(value) {
        var index, indexes, _i, _ref;
        indexes = [];
        for (index = _i = 0, _ref = this.currentState.length; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
          if (this.currentState[index] === value) {
            indexes.push(index);
          }
        }
        return indexes;
      };

      Board.prototype.getScore = function() {
        var indexesLoose, indexesWin, isLoose, isWin;
        indexesWin = this.getIndexesWithValue(1);
        indexesLoose = this.getIndexesWithValue(-1);
        isWin = this._winningIndexes.inArray(indexesWin);
        isLoose = this._winningIndexes.inArray(indexesLoose);
        if (isWin) {
          return SCORE.WIN;
        } else if (isLoose) {
          return SCORE.LOOSE;
        } else if (this.getIndexesWithValue(0).length === 0) {
          return SCORE.DRAW;
        }
        return null;
      };

      Board.prototype.toString = function() {
        var i, str, strval, _i, _ref;
        str = "";
        for (i = _i = 0, _ref = this.currentState.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if ((i % 3) === 0) {
            str += "\n";
          }
          strval = this.currentState[i];
          if (this.currentState[i] >= 0) {
            strval = " " + strval;
          }
          str += " " + strval;
        }
        return str;
      };

      Board.prototype.computeWinningIndexes = function() {
        var a, boardHeight, boardWidth, col, diag, i, indexes, row, _i, _j, _k, _l, _m, _ref;
        boardWidth = boardHeight = Math.sqrt(this.currentState.length);
        indexes = [];
        row = [];
        for (i = _i = 0, _ref = boardWidth * boardHeight; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (i % boardWidth === 0 && i !== 0) {
            indexes.push(row);
            row = [];
          }
          row.push(i);
        }
        col = [];
        for (i = _j = 0; 0 <= boardWidth ? _j < boardWidth : _j > boardWidth; i = 0 <= boardWidth ? ++_j : --_j) {
          for (a = _k = 0; 0 <= boardWidth ? _k < boardWidth : _k > boardWidth; a = 0 <= boardWidth ? ++_k : --_k) {
            col.push(a * boardWidth + i);
          }
          indexes.push(col);
          col = [];
        }
        diag = [];
        for (i = _l = 0; 0 <= boardWidth ? _l < boardWidth : _l > boardWidth; i = 0 <= boardWidth ? ++_l : --_l) {
          diag.push(i * boardWidth + i);
        }
        if (diag.length === boardWidth) {
          indexes.push(diag);
        }
        diag = [];
        for (i = _m = 0; 0 <= boardWidth ? _m < boardWidth : _m > boardWidth; i = 0 <= boardWidth ? ++_m : --_m) {
          diag.push((i + 1) * boardWidth - (i + 1));
        }
        if (diag.length === boardWidth) {
          indexes.push(diag);
        }
        return indexes;
      };

      Board.prototype._winningIndexes = null;

      return Board;

    })();
    AiEngine = (function() {

      function AiEngine() {}

      AiEngine.prototype.getNextMove = function(board) {
        throw "NotImplemented";
      };

      return AiEngine;

    })();
    NegaMaxEngine = (function(_super) {

      __extends(NegaMaxEngine, _super);

      function NegaMaxEngine() {
        return NegaMaxEngine.__super__.constructor.apply(this, arguments);
      }

      NegaMaxEngine.prototype.cache = {};

      NegaMaxEngine.prototype.defaultDepth = 100;

      NegaMaxEngine.prototype.negamax = function(node, depth, alfa, beta, color) {
        var child, score, val, _i, _len, _ref;
        if (depth == null) {
          depth = this.defaultDepth;
        }
        if (alfa == null) {
          alfa = Number.NEGATIVE_INFINITY;
        }
        if (beta == null) {
          beta = Number.POSITIVE_INFINITY;
        }
        if (color == null) {
          color = 1;
        }
        node.children = Node.arrayAsNodes(node.board.getPossibleBoards(color));
        score = node.board.getScore(color);
        if (node.children.length === 0 || depth === 0 || score !== null) {
          node.score = color * score;
          return node.score;
        } else {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            val = -this.negamax(child, depth - 1, -beta, -alfa, -color);
            if (val >= beta) {
              node.value = val;
              return val;
            }
            alfa = Math.max(alfa, val);
          }
          node.value = alfa;
          return alfa;
        }
      };

      NegaMaxEngine.prototype.getNextMove = function(board) {
        var child, _i, _len, _ref;
        this.root = new Node(board);
        this.negamax(this.root);
        _ref = this.root.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.value === -this.root.value || child.score === -this.root.value) {
            return child.board.move;
          }
        }
        return null;
      };

      return NegaMaxEngine;

    })(AiEngine);
    RandomEngine = (function(_super) {

      __extends(RandomEngine, _super);

      function RandomEngine() {
        return RandomEngine.__super__.constructor.apply(this, arguments);
      }

      RandomEngine.prototype.getNextMove = function(board) {
        var indexes;
        indexes = board.getIndexesWithValue(0);
        return indexes[Math.floor(Math.random() * indexes.length)];
      };

      return RandomEngine;

    })(AiEngine);
    Graph = (function(_super) {

      __extends(Graph, _super);

      function Graph(negamax) {
        this.negamax = negamax;
      }

      Graph.prototype.numPerDepth = {
        1: 1
      };

      Graph.prototype.depthIndex = {};

      Graph.prototype.idd = 0;

      Graph.prototype.count = function(node, depth) {
        var child, val, _i, _len, _ref, _results;
        if (depth == null) {
          depth = 1;
        }
        val = node.value;
        if ("score" in node) {
          val = node.score;
        }
        if (node.children.length !== 0) {
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            this.numPerDepth[depth + 1] = (this.numPerDepth[depth + 1] || 0) + 1;
            _results.push(this.count(child, depth + 1));
          }
          return _results;
        }
      };

      Graph.prototype.print = function(node, depth) {
        var child, id, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (depth == null) {
          depth = 1;
        }
        if (node.children.length !== 0) {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            this.print(child, depth + 1);
          }
        }
        this.depthIndex[depth] = (this.depthIndex[depth] || 0) + 1;
        id = [node.board.toString(), this.idd++].join(" ");
        s1.addNode(id, {
          'x': (300 / (this.numPerDepth[depth] + 1)) * this.depthIndex[depth],
          'y': depth * 10,
          'size': 10 / depth,
          'color': '#ffaa00'
        });
        node.id = id;
        if (node.children.length !== 0) {
          _ref1 = node.children;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            child = _ref1[_j];
            _results.push(s1.addEdge(this.idd++, id, child.id));
          }
          return _results;
        }
      };

      Graph.prototype.notify = function(event, game) {
        this.board = game.getBoard();
        if (game.aiEngine === aiEngines.negamax) {
          return this.draw();
        }
      };

      Graph.prototype.draw = function() {
        if (!this.negamax.root) {
          return;
        }
        this.numPerDepth = {
          1: 1
        };
        this.depthIndex = {};
        s1.emptyGraph();
        this.count(this.negamax.root);
        this.print(this.negamax.root);
        return s1.draw();
      };

      return Graph;

    })(Listener);
    Event = (function() {

      function Event() {}

      Event.prototype._listeners = [];

      Event.prototype.addListener = function(event, element) {
        return this._listeners.push({
          event: event,
          element: element
        });
      };

      Event.prototype.notifyListeners = function(event, value) {
        var listener, _i, _len, _ref;
        _ref = this._listeners;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          if (listener.event === event) {
            listener.element.notify({
              type: event,
              value: value
            }, this);
          }
        }
        return true;
      };

      return Event;

    })();
    Game = (function(_super) {

      __extends(Game, _super);

      function Game() {
        this.board = new Board;
        this.status = GAME_STATUS.START;
      }

      Game.prototype.getBoard = function() {
        return this.board;
      };

      Game.prototype.setAi = function(aiEngine) {
        this.aiEngine = aiEngine;
      };

      Game.prototype.restart = function() {
        this.status = GAME_STATUS.START;
        this.notifyListeners(EVENT.STATUS_CHANGE, this.status);
        this.board.currentState = [0, 0, 0, 0, 0, 0, 0, 0, 0];
        return this.notifyListeners(EVENT.COMPUTER_MOVE);
      };

      Game.prototype.finish = function() {
        this.status = GAME_STATUS.FINISH;
        this.notifyListeners(EVENT.STATUS_CHANGE, this.status);
        return this.notifyListeners(EVENT.COMPUTER_MOVE);
      };

      Game.prototype.setPlayerMove = function(index) {
        var indexAi;
        if (index == null) {
          index = null;
        }
        if (this.status === GAME_STATUS.START) {
          this.status = GAME_STATUS.PROGRESS;
          this.notifyListeners(EVENT.STATUS_CHANGE);
        }
        if (index !== null) {
          if (this.board.currentState[index] === 0) {
            this.board.currentState[index] = -1;
          } else {
            return;
          }
        }
        if (this.board.getScore() !== null) {
          this.finish();
          return;
        }
        indexAi = this.aiEngine.getNextMove(this.board);
        this.board.currentState[indexAi] = 1;
        if (this.board.getScore() !== null) {
          this.finish();
          return;
        }
        return this.notifyListeners(EVENT.COMPUTER_MOVE);
      };

      return Game;

    })(Event);
    AppUI = (function(_super) {

      __extends(AppUI, _super);

      function AppUI(game) {
        var avgrnd,
          _this = this;
        this.game = game;
        this.start = $("computer-start");
        this.restart = $("restart");
        this.aiType = $("ai-type");
        avgrnd = document.getElementsByClassName('avgrund-popup')[0];
        this.notifyTitle = avgrnd.getElementsByTagName("h2")[0];
        this.notifyParagraphs = avgrnd.getElementsByTagName("p");
        $("btn-close").addEventListener('click', avgrund.deactivate, false);
        $("btn-restart").addEventListener('click', function() {
          avgrund.deactivate();
          return _this.game.restart();
        }, false);
      }

      AppUI.prototype.notify = function(event, game) {
        var score;
        if (event.value === GAME_STATUS.FINISH) {
          score = game.getBoard().getScore();
          return this.playerNotify(score);
        } else if (event.type === EVENT.STATUS_CHANGE) {
          if (this.restart.disabled) {
            this.restart.classList.remove("disabled");
            this.restart.removeAttribute("disabled");
            this.start.classList.add("disabled");
            return this.start.disabled = "disabled";
          } else {
            this.start.classList.remove("disabled");
            this.start.removeAttribute("disabled");
            this.restart.classList.add("disabled");
            return this.restart.disabled = "disabled";
          }
        }
      };

      AppUI.prototype.playerNotify = function(type) {
        if (type === SCORE.LOOSE) {
          this.notifyTitle.innerHTML = "You Win!";
          this.notifyParagraphs[0].innerHTML = "Congratulations! You are the best!";
          this.notifyParagraphs[1].innerHTML = "Cool, but now maybe try using the more advanced AI mode?";
        } else if (type === SCORE.WIN) {
          this.notifyTitle.innerHTML = "You Loose :-(";
          this.notifyParagraphs[0].innerHTML = "We're sorry it looks that computer has beaten you..";
          this.notifyParagraphs[1].innerHTML = "Better luck next time! Cheer up!";
        } else if (type === SCORE.DRAW) {
          this.notifyTitle.innerHTML = "A Draw!";
          this.notifyParagraphs[0].innerHTML = "This was pretty exciting huh?";
          this.notifyParagraphs[1].innerHTML = "You can change computer AI mode if you find current oponent too hard to beat...";
        }
        return avgrund.activate('stack');
      };

      return AppUI;

    })(Listener);
    init = function() {
      var appUI, boardGUI, changeAi, game, graph, restart, startComputer, tictac, tictacClick;
      window.s1 = sigma.init(document.getElementById('sig')).drawingProperties({
        defaultLabelHoverColor: '#000'
      }).mouseProperties({
        mouseEnabled: false
      }).graphProperties({
        defaultLabelColor: '#fff'
      });
      game = new Game;
      game.setAi(aiEngines.negamax);
      appUI = new AppUI(game);
      graph = new Graph(aiEngines.negamax);
      boardGUI = new BoardGUI($("tictactoe"), game.board);
      boardGUI.draw();
      game.addListener(EVENT.COMPUTER_MOVE, boardGUI);
      game.addListener(EVENT.COMPUTER_MOVE, graph);
      game.addListener(EVENT.STATUS_CHANGE, appUI);
      tictac = $("tictactoe");
      tictacClick = function(event) {
        var index, x, y;
        event = event || window.event;
        x = event.pageX - tictac.offsetLeft;
        y = event.pageY - tictac.offsetTop;
        index = boardGUI.handleClick(x, y);
        return game.setPlayerMove(index);
      };
      startComputer = function(event) {
        return game.setPlayerMove();
      };
      restart = function() {
        return game.restart();
      };
      changeAi = function(event) {
        return game.setAi(aiEngines[this.value]);
      };
      $("computer-start").addEventListener('click', startComputer, false);
      $("restart").addEventListener('click', restart, false);
      $("ai-type").onchange = changeAi;
      return tictac.addEventListener('click', tictacClick, false);
    };
    aiEngines = {
      negamax: new NegaMaxEngine,
      random: new RandomEngine
    };
    exports.init = init;
    exports.aiEngines = aiEngines;
    exports.Board = Board;
    return exports.NegaMaxEngine = NegaMaxEngine;
  })(typeof exports === 'undefined' ? this['main'] = {} : exports);

}).call(this);
