// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var arrays_equal;

  arrays_equal = function(a, b) {
    return !(a < b || b < a);
  };

  module.exports = function(t, a) {
    var aiEngine, board, findIndexes, indexAi, testBoard, winningIndexes, winningIndexes3x3, winningIndexes4x4;
    board = new t.Board;
    winningIndexes3x3 = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
    winningIndexes = board.computeWinningIndexes();
    findIndexes = function(needles, haystack) {
      var found, i, x, _i, _j, _ref, _ref1, _results;
      _results = [];
      for (x = _i = 0, _ref = needles.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        found = false;
        for (i = _j = 0, _ref1 = haystack.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (arrays_equal(haystack[i], needles[x])) {
            found = true;
            break;
          }
        }
        _results.push(a.ok(found, "Error computing winning indexes, missing " + needles[x]));
      }
      return _results;
    };
    findIndexes(winningIndexes3x3, winningIndexes);
    winningIndexes4x4 = [[0, 1, 2, 3], [4, 5, 6, 7], [0, 4, 8, 12]];
    board.currentState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    winningIndexes = board.computeWinningIndexes();
    findIndexes(winningIndexes4x4, winningIndexes);
    aiEngine = new t.NegaMaxEngine;
    testBoard = new t.Board([1, 1, 0, -1, -1, 0, 0, 0, 1]);
    indexAi = aiEngine.getNextMove(testBoard);
    a(indexAi, 2, "NegaMax next move computation");
    testBoard = new t.Board([1, 1, -1, -1, 0, -1, 0, 0, 1]);
    indexAi = aiEngine.getNextMove(testBoard);
    a(indexAi, 4, "NegaMax next move computation");
    return this;
  };

}).call(this);
